[{"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\index.tsx":"1","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\routes\\Public.tsx":"2","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\routes\\Private.tsx":"3","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\contexts\\AppProvider.tsx":"4","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\containers\\Homepage\\index.tsx":"5","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\containers\\Login\\index.tsx":"6","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\contexts\\UserProvider.tsx":"7","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\constants\\axios.ts":"8","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\constants\\auth.ts":"9","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\components\\TasksTab\\index.tsx":"10","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\components\\Header\\index.tsx":"11","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\components\\Profile\\index.tsx":"12","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\constants\\constants.ts":"13","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\components\\PaginationBar\\index.tsx":"14"},{"size":757,"mtime":1613470462582,"results":"15","hashOfConfig":"16"},{"size":224,"mtime":1613919611189,"results":"17","hashOfConfig":"16"},{"size":579,"mtime":1613919583851,"results":"18","hashOfConfig":"16"},{"size":270,"mtime":1613918688699,"results":"19","hashOfConfig":"16"},{"size":872,"mtime":1613961735759,"results":"20","hashOfConfig":"16"},{"size":4324,"mtime":1613918631291,"results":"21","hashOfConfig":"16"},{"size":2204,"mtime":1613919381652,"results":"22","hashOfConfig":"16"},{"size":526,"mtime":1613963778644,"results":"23","hashOfConfig":"16"},{"size":108,"mtime":1613889041824,"results":"24","hashOfConfig":"16"},{"size":6266,"mtime":1614185484503,"results":"25","hashOfConfig":"16"},{"size":1221,"mtime":1613931315145,"results":"26","hashOfConfig":"16"},{"size":720,"mtime":1613929539388,"results":"27","hashOfConfig":"16"},{"size":1265,"mtime":1613915944873,"results":"28","hashOfConfig":"16"},{"size":1752,"mtime":1614185571823,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1qri2xr",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\index.tsx",[],["61","62"],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\routes\\Public.tsx",[],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\routes\\Private.tsx",[],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\contexts\\AppProvider.tsx",[],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\containers\\Homepage\\index.tsx",[],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\containers\\Login\\index.tsx",["63"],"import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { post } from '../../constants/axios';\nimport { useUser } from 'contexts/UserProvider';\n\nimport './style.scss';\nimport axios from 'axios';\n\nconst Login = () => {\n  const [submitType, setSubmitType] = useState<'sign in' | 'sign up'>(\n    'sign in',\n  );\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [confirmPassword, setConfirmPassword] = useState<string>('');\n  const [waiting, setWaiting] = useState<boolean>(false);\n  const [errorText, setErrorText] = useState<string>();\n  const [loginSuccess, setLoginSuccess] = useState<boolean>(false);\n\n  const { setUserName, setToken } = useUser();\n\n  useEffect(() => {\n    setSubmitType('sign in');\n    setErrorText('');\n    setWaiting(false);\n    setLoginSuccess(false);\n    setToken('');\n  }, []);\n\n  useEffect(() => {\n    setErrorText('');\n  }, [submitType]);\n\n  const handleInvalidation = errors => {\n    if (errors.name) {\n      setErrorText(errors.name[0]);\n    } else if (errors.email) {\n      setErrorText(errors.email);\n    } else if (errors.password) {\n      setErrorText(errors.password[0]);\n    }\n  };\n\n  const handleSubmit: () => void = () => {\n    setWaiting(true);\n    if (submitType === 'sign in') {\n      post('auth/login', {\n        email,\n        password,\n      })\n        .then(res => {\n          axios.defaults.headers.common.Authorization = `Bearer ${res.data.access_token}`;\n          setUserName(res.data.user.name);\n          setToken(res.data.access_token);\n          setLoginSuccess(true);\n        })\n        .catch(err => {\n          const data = err.response.data;\n          switch (data.status) {\n            case 401: // unauthorized\n              setErrorText('Invalid email or password.');\n              break;\n\n            default:\n              setErrorText('Login error.');\n          }\n        })\n        .finally(() => setWaiting(false));\n    } else {\n      post('auth/register', {\n        name,\n        email,\n        password,\n        password_confirmation: confirmPassword,\n      })\n        .then(res => {\n          setSubmitType('sign in');\n        })\n        .catch(err => {\n          const data = err.response.data;\n          switch (data.status) {\n            case 422: // invalid field\n              handleInvalidation(data.errors);\n              break;\n\n            default:\n              setErrorText('Register error.');\n          }\n        })\n        .finally(() => setWaiting(false));\n    }\n  };\n\n  if (loginSuccess) {\n    return (\n      <Redirect\n        to={{\n          pathname: '/',\n        }}\n      />\n    );\n  }\n\n  return (\n    <main className=\"login d-flex flex-column align-items-center m-auto\">\n      <form className=\"login-info d-flex flex-column align-items-center m-auto\">\n        {submitType === 'sign up' && (\n          <input\n            className=\"name\"\n            type=\"text\"\n            placeholder=\"Username\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n        )}\n        <input\n          className=\"email\"\n          type=\"text\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n        />\n        <input\n          className=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={e => setPassword(e.target.value)}\n        />\n        {submitType === 'sign up' && (\n          <input\n            className=\"password-confirm\"\n            type=\"password\"\n            placeholder=\"Confirm password\"\n            value={confirmPassword}\n            onChange={e => setConfirmPassword(e.target.value)}\n          />\n        )}\n        {errorText && <span className=\"error-text\">{errorText}</span>}\n        <button className=\"login-btn\" disabled={waiting} onClick={handleSubmit}>\n          {submitType === 'sign in' ? 'Log In' : 'Sign up'}\n        </button>\n      </form>\n      {submitType === 'sign in' && (\n        <div>\n          <span>Don't you have an account? </span>\n          <a href=\"#a\" onClick={e => setSubmitType('sign up')}>\n            Sign Up\n          </a>\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Login;\n","F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\contexts\\UserProvider.tsx",[],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\constants\\axios.ts",[],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\constants\\auth.ts",[],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\components\\TasksTab\\index.tsx",["64","65","66"],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\components\\Header\\index.tsx",[],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\components\\Profile\\index.tsx",[],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\constants\\constants.ts",[],"F:\\Web\\laravel-react\\todolist\\todolist-ui\\src\\components\\PaginationBar\\index.tsx",["67","68"],"import React, { useState, useEffect } from 'react';\nimport { Pagination } from 'react-bootstrap';\n\nimport './style.scss';\n\ninterface IProps {\n  pageCount: number;\n  curPage: number;\n  lastPage: number;\n  keyPrefix: string;\n  onPageChanged: (page: number) => void;\n}\n\nconst PaginationBar: React.FC<IProps> = ({\n  pageCount,\n  curPage,\n  lastPage,\n  keyPrefix,\n  onPageChanged: setCurPage,\n}: IProps) => {\n  const [pageItems, setPageItems] = useState<Array<number>>(\n    new Array(pageCount).fill(0).map((item, idx) => idx + 1),\n  );\n\n  useEffect(() => {\n    const from = Math.max(\n      1,\n      Math.min(curPage - Math.floor(pageCount / 2), lastPage - pageCount + 1),\n    );\n    setPageItems(new Array(pageCount).fill(0).map((item, idx) => idx + from));\n  }, [curPage, pageCount]);\n\n  useEffect(() => {\n    if (lastPage < curPage) {\n      setCurPage(lastPage);\n    }\n  }, [lastPage]);\n\n  return (\n    <Pagination size=\"sm\">\n      <Pagination.First\n        disabled={curPage === 1}\n        onClick={() => setCurPage(1)}\n      />\n      <Pagination.Prev\n        disabled={curPage === 1}\n        onClick={() => setCurPage(curPage - 1)}\n      />\n      {pageItems.map(\n        item =>\n          item <= lastPage && (\n            <Pagination.Item\n              key={`${keyPrefix}-${item}`}\n              active={curPage === item}\n              onClick={() => setCurPage(item)}\n            >\n              {item}\n            </Pagination.Item>\n          ),\n      )}\n      <Pagination.Next\n        disabled={curPage === lastPage}\n        onClick={() => setCurPage(curPage + 1)}\n      />\n      <Pagination.Last\n        disabled={curPage === lastPage}\n        onClick={() => setCurPage(lastPage)}\n      />\n    </Pagination>\n  );\n};\n\nexport default PaginationBar;\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":29,"column":6,"nodeType":"75","endLine":29,"endColumn":8,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":89,"column":6,"nodeType":"75","endLine":89,"endColumn":8,"suggestions":"78"},{"ruleId":"73","severity":1,"message":"79","line":97,"column":6,"nodeType":"75","endLine":97,"endColumn":18,"suggestions":"80"},{"ruleId":"73","severity":1,"message":"81","line":99,"column":31,"nodeType":"75","endLine":99,"endColumn":40,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"83","line":31,"column":6,"nodeType":"75","endLine":31,"endColumn":26,"suggestions":"84"},{"ruleId":"73","severity":1,"message":"85","line":37,"column":6,"nodeType":"75","endLine":37,"endColumn":16,"suggestions":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setToken'. Either include it or remove the dependency array.","ArrayExpression",["89"],"React Hook useEffect has missing dependencies: 'authToken' and 'fetchPageContent'. Either include them or remove the dependency array.",["90"],"React Hook useEffect has missing dependencies: 'curPage' and 'fetchPageContent'. Either include them or remove the dependency array.",["91"],"React Hook useEffect has missing dependencies: 'filterType', 'isFetching', and 'keyword'. Either include them or remove the dependency array.",["92"],"React Hook useEffect has a missing dependency: 'lastPage'. Either include it or remove the dependency array.",["93"],"React Hook useEffect has missing dependencies: 'curPage' and 'setCurPage'. Either include them or remove the dependency array. If 'setCurPage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["94"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [setToken]",{"range":"107","text":"108"},"Update the dependencies array to be: [authToken, fetchPageContent]",{"range":"109","text":"110"},"Update the dependencies array to be: [curPage, fetchPageContent, filterType]",{"range":"111","text":"112"},"Update the dependencies array to be: [curPage, filterType, isFetching, keyword]",{"range":"113","text":"114"},"Update the dependencies array to be: [curPage, lastPage, pageCount]",{"range":"115","text":"116"},"Update the dependencies array to be: [curPage, lastPage, setCurPage]",{"range":"117","text":"118"},[958,960],"[setToken]",[2385,2387],"[authToken, fetchPageContent]",[2507,2519],"[curPage, fetchPageContent, filterType]",[2553,2562],"[curPage, filterType, isFetching, keyword]",[759,779],"[curPage, lastPage, pageCount]",[872,882],"[curPage, lastPage, setCurPage]"]